//***************************************************************************
// include/cxx/cctype
//
//   Copyright (C) 2009 Gregory Nutt. All rights reserved.
//   Author: Gregory Nutt <gnutt@nuttx.org>
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with the
//    distribution.
// 3. Neither the name NuttX nor the names of its contributors may be
//    used to endorse or promote products derived from this software
//    without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
// OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
// AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
//***************************************************************************

#ifndef __INCLUDE_CXX_CCTYPE
#define __INCLUDE_CXX_CCTYPE

//***************************************************************************
// Included Files
//***************************************************************************

#include <ctype.h>

// Remove macros in favor of real functions
#undef isalnum
#undef isalpha
#undef isblank
#undef iscntrl
#undef isdigit
#undef isgraph
#undef islower
#undef isprint
#undef ispunct
#undef isspace
#undef isupper
#undef isxdigit
#undef tolower
#undef toupper

//***************************************************************************
// Namespace
//***************************************************************************

namespace std
{
	// Only define functions for the C locale.
	inline int islower(int c) { return c >= 'a' && c <= 'z'; }
	inline int isupper(int c) { return c >= 'A' && c <= 'Z'; }
	inline int isdigit(int c) { return c >= '0' && c <= '9'; }
	inline int isalpha(int c) { return islower(c) || isupper(c); }
	inline int isalnum(int c) { return isalpha(c) || isdigit(c); }
	inline int isprint(int c) { return c >= 0x20 && c < 0x7f; }
	inline int iscntrl(int c) { return c >= 0 && !isprint(c); }
	inline int isgraph(int c) { return c > 0x20 && c < 0x7f; }
	inline int ispunct(int c) { return isgraph(c) && !isalnum(c); }
	inline int isblank(int c) { return c == ' ' || c == '\t'; }
	inline int isspace(int c) { return c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == '\v'; }
	inline int isxdigit(int c) { return isdigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'); }
	inline int tolower(int c) { return isupper(c) ? c - 'A' + 'a' : c; }
	inline int toupper(int c) { return islower(c) ? c - 'a' + 'A' : c; }
}

#endif // __INCLUDE_CXX_CCTYPE
